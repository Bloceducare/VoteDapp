{
	"compiler": {
		"version": "0.5.0+commit.1d4f565a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_ein",
						"type": "uint256"
					}
				],
				"name": "vote",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "ein",
						"type": "uint256"
					}
				],
				"name": "becomeCandidate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newDays",
						"type": "uint256"
					}
				],
				"name": "setNewDeadline",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "candidates",
				"outputs": [
					{
						"name": "voteCount",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_address",
						"type": "address"
					}
				],
				"name": "checkEIN",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDeadline",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_target",
						"type": "address"
					}
				],
				"name": "checkforReg",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_max",
						"type": "uint256"
					}
				],
				"name": "setMaxCandidacy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "callOnAddition",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "snowflakeDescription",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "snowflakeName",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "callOnRemoval",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "ein",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onAddition",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onRemoval",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aCandidate",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_snowflakeAddress",
						"type": "address"
					}
				],
				"name": "setSnowflakeAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getMaxCandidates",
				"outputs": [
					{
						"name": "",
						"type": "uint256[]"
					},
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "snowflakeAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDetails",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aParticipant",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "snowflakeAddress",
						"type": "address"
					},
					{
						"name": "_name",
						"type": "string"
					},
					{
						"name": "_description",
						"type": "string"
					},
					{
						"name": "_days",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "_candidate",
						"type": "uint256"
					}
				],
				"name": "voted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "_candidateEIN",
						"type": "uint256"
					}
				],
				"name": "becameCandidate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "voterEin",
						"type": "uint256"
					}
				],
				"name": "registeredAsVoter",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "_newDeadline",
						"type": "uint256"
					}
				],
				"name": "newDeadlineSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"isOwner()": {
					"return": "true if `msg.sender` is the owner of the contract."
				},
				"owner()": {
					"return": "the address of the owner."
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				}
			}
		},
		"userdoc": {
			"methods": {
				"onAddition(uint256,uint256,bytes)": {
					"notice": "//implement create Identity function //might not be needed for now function createId(address recoveryAddress) public returns(uint256 ein){ SnowflakeInterface snowfl = SnowflakeInterface(snowflakeAddress); IdentityRegistryInterface idRegistry= IdentityRegistryInterface(snowfl.identityRegistryAddress()); address[] memory _providers = new address [](2); address[] memory _resolvers= new address [](1); _providers[0]= address(this); _providers[1]= _snowflakeAddress; _resolvers[0]= address(this); return idRegistry.createIdentity(recoveryAddress,_providers,_resolvers); } *"
				},
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				},
				"setNewDeadline(uint256)": {
					"notice": "function withdrawFees(address to) public onlyOwner { SnowflakeInterface snowfl = SnowflakeInterface(snowflakeAddress); HydroInterface hydro = HydroInterface(snowfl.hydroTokenAddress()); withdrawHydroBalanceTo(to, hydro.balanceOf(address(this))); }*"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/resolvers/Voting.sol": "Voting"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/SnowflakeResolver.sol": {
			"keccak256": "0x47767c5bf5606300e05d8a37ac8696101621cc182a608fcd5b44f7581904991f",
			"urls": [
				"bzzr://17d4af2410f7c74dad682be3318cb01b467e76aee806639a202385489e90546b"
			]
		},
		"localhost/contracts/interfaces/HydroInterface.sol": {
			"keccak256": "0x56647cb0f09d042392f3e117790be3fccd7622594ef904a4fee4f46f91c21683",
			"urls": [
				"bzzr://eb0b29b84efa1d37f211f544ed39011c4b521482f04999381f7daebb527552c8"
			]
		},
		"localhost/contracts/interfaces/IdentityRegistryInterface.sol": {
			"keccak256": "0xb559191dbd30da97a8b5759a895d7f4eff420eedc55b0786ae7206fbe384dc15",
			"urls": [
				"bzzr://a6122de11af1f831b1a93dba66aabe9e299f0040cf3404510790453addc6e0d9"
			]
		},
		"localhost/contracts/interfaces/SnowflakeInterface.sol": {
			"keccak256": "0x22075888d9ca00c08120612beb55e5afdaa5583c9419a5b76d4d1fe0bd0c68a4",
			"urls": [
				"bzzr://4e947e00afeca3809bd7bdde04e92e616e77efa9e4ddde344f52896d21e39006"
			]
		},
		"localhost/contracts/interfaces/SnowflakeResolverInterface.sol": {
			"keccak256": "0x8a5595a41d86f78514dfcd6eaa0ec79482187b8ead1c8c129faab29aeb2aced1",
			"urls": [
				"bzzr://1f741c8e9d50535a1a18c71c689e1e2876cd75e30256273ffeb2b47b72bcbb76"
			]
		},
		"localhost/contracts/resolvers/Voting.sol": {
			"keccak256": "0xaa83f525002a63a1df30a3a1218a2955a866eb2606fe54fdeecd2b05c315e2f6",
			"urls": [
				"bzzr://5f0116c913dff738bfba12ed9c7f7e9eb706ab0993509bd8ced20b1f04dd05c3"
			]
		},
		"localhost/contracts/zeppelin/ownership/Ownable.sol": {
			"keccak256": "0x1fbe7f67d6b8ac1f5aff86a9da41833273e073c47ce1e160f9addd9c64d9ff1d",
			"urls": [
				"bzzr://1a147508938228cad4bbc0f17c66e6d541d8740e8ae521dab377fe1519f801f1"
			]
		}
	},
	"version": 1
}